# bot.py
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.utils import executor
from datetime import datetime

import config
import database
import keyboards
import states

bot = Bot(token=config.API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

database.init_db()

user_photos = {}

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(
        "üì¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ [–ì–æ—Ä–æ–¥] –û–±—ä—è–≤–ª–µ–Ω–∏—è!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboards.main_menu
    )

@dp.message_handler(text="‚ûï –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def new_ad_start(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboards.categories_kb)
    await states.AdStates.category.set()

@dp.message_handler(state=states.AdStates.category)
async def process_category(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboards.main_menu)
        return
    await state.update_data(category=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
    await states.AdStates.title.set()

@dp.message_handler(state=states.AdStates.title)
async def process_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
    await states.AdStates.description.set()

@dp.message_handler(state=states.AdStates.description)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    user_photos[message.from_user.id] = []
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ (–¥–æ 3 —à—Ç, –ø–æ –æ–¥–Ω–æ–º—É). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ '–î–∞–ª–µ–µ'")
    await states.AdStates.photo.set()

@dp.message_handler(content_types=['photo'], state=states.AdStates.photo)
async def process_photo(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if len(user_photos[user_id]) < 3:
        user_photos[user_id].append(message.photo[-1].file_id)
        await message.answer(f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({len(user_photos[user_id])}/3)")
    else:
        await message.answer("–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ.")

@dp.message_handler(text="–î–∞–ª–µ–µ", state=states.AdStates.photo)
async def process_next(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω, @username –∏–ª–∏ —Å–ª–æ–≤–æ '—á–µ—Ä–µ–∑ –±–æ—Ç–∞'):")
    await states.AdStates.contact.set()

@dp.message_handler(state=states.AdStates.contact)
async def process_contact(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id
    photo_ids = user_photos.get(user_id, [])
    created_at = datetime.now().strftime("%d.%m.%Y %H:%M")

    database.add_ad(
        user_id=user_id,
        category=data['category'],
        title=data['title'],
        description=data['description'],
        photo_ids=photo_ids,
        contact=message.text,
        created_at=created_at
    )

    await message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!", reply_markup=keyboards.main_menu)
    await state.finish()
    if user_id in user_photos:
        del user_photos[user_id]

@dp.message_handler(text="üîç –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def show_ads(message: types.Message):
    ads = database.get_all_ads()
    if not ads:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        return
    for ad in ads[:5]:
        text = f"""
üìå {ad[3]}
{ad[4]}

üìû –ö–æ–Ω—Ç–∞–∫—Ç: {ad[6]}
üìÖ –î–∞—Ç–∞: {ad[7]}
        """
        await message.answer(text)
        photo_ids = ad[5]
        if photo_ids:
            photo_list = photo_ids.split(',')
            media = [types.InputMediaPhoto(media=pid) for pid in photo_list]
            await bot.send_media_group(chat_id=message.chat.id, media=media)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
