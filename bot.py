# bot.py
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter, CommandObject
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from datetime import datetime
import asyncio
import logging

import config
import database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
database.init_db()

# –•—Ä–∞–Ω–∏–º —Ñ–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ (–¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π)
user_photos = {}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
# –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
categories_list = [
    "üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
    "üíº –†–∞–±–æ—Ç–∞/–£—Å–ª—É–≥–∏", "üõí –í–µ—â–∏",
    "üê∂ –û—Ç–¥–∞–º –¥–∞—Ä–æ–º", "üéì –û–±—É—á–µ–Ω–∏–µ"
]

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Ä–∞–∑–¥–µ–ª—ã)
def create_main_sections_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è")],
            [KeyboardButton(text="üîç –ü–æ—Ç–µ—Ä—è—à–∫–∏")],
            # [KeyboardButton(text="üé≠ –ê—Ñ–∏—à–∞")] # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
        ],
        resize_keyboard=True
    )

# –ü–æ–¥–º–µ–Ω—é "–û–±—ä—è–≤–ª–µ–Ω–∏—è"
def create_ads_submenu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")],
            [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")],
            [KeyboardButton(text="üë§ –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

# –ü–æ–¥–º–µ–Ω—é "–ü–æ—Ç–µ—Ä—è—à–∫–∏"
def create_finds_submenu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –°–æ–æ–±—â–∏—Ç—å")], # –í–µ–¥–µ—Ç –∫ –≤—ã–±–æ—Ä—É "–ù–∞–π–¥–µ–Ω–æ"/"–ü–æ—Ç–µ—Ä—è–Ω–æ"
            [KeyboardButton(text="üëÄ –ù–∞–π–¥–µ–Ω–æ")],   # –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Ö–æ–¥–æ–∫
            [KeyboardButton(text="üÜò –ü–æ—Ç–µ—Ä—è–Ω–æ")], # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Ç–µ—Ä—å
            [KeyboardButton(text="üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏")], # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–ø–∏—Å–∏ –≤ "–ü–æ—Ç–µ—Ä—è—à–∫–∞—Ö"
def create_find_type_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéÅ –ù–∞—à–µ–ª")],
            [KeyboardButton(text="üò¢ –ü–æ—Ç–µ—Ä—è–ª")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ 2 —Å—Ç–æ–ª–±—Ü–∞ –ë–ï–ó –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è)
def create_simple_categories_keyboard():
    categories_kb_rows = []
    for i in range(0, len(categories_list), 2):
        row = [KeyboardButton(text=cat) for cat in categories_list[i:i+2]]
        categories_kb_rows.append(row)
    categories_kb_rows.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=categories_kb_rows, resize_keyboard=True)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ 2 —Å—Ç–æ–ª–±—Ü–∞ –° –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–¥–ª—è –ø–æ–∏—Å–∫–∞)
def create_search_categories_keyboard():
    categories_kb_rows = []
    for i in range(0, len(categories_list), 2):
        row_buttons = []
        for cat in categories_list[i:i+2]:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            try:
                count = len(database.get_ads_by_category(cat))
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{cat}': {e}")
                count = 0
            row_buttons.append(KeyboardButton(text=f"{cat} ({count})"))
        categories_kb_rows.append(row_buttons)
    categories_kb_rows.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=categories_kb_rows, resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–û—Ç–º–µ–Ω–∞/–ù–∞–∑–∞–¥" –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
cancel_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
    resize_keyboard=True
)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Å—á–µ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
def create_main_menu():
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    try:
        total_ads_count = len(database.get_all_ads())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")
        total_ads_count = 0

    main_menu = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=f"‚ûï –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")],
            [KeyboardButton(text=f"üîç –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ({total_ads_count})")],
            [KeyboardButton(text="üë§ –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")]
        ],
        resize_keyboard=True
    )
    return main_menu

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class AdStates(StatesGroup):
    category = State()
    title = State()
    description = State()
    photo = State()
    contact = State()
    search_category = State()
    admin_menu = State()
    admin_delete = State()
    # –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è "–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"
    my_ads_list = State()
    my_ad_selected = State()
    my_ad_edit_field = State() # –î–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    my_ad_edit_value = State() # –î–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–ü–æ—Ç–µ—Ä—è—à–∫–∏" ---
class FindStates(StatesGroup):
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–ø–∏—Å–∏ (–Ω–∞–π–¥–µ–Ω–æ/–ø–æ—Ç–µ—Ä—è–Ω–æ) –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
    choosing_type = State()
    # –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
    entering_item = State()
    # –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
    entering_description = State()
    # –í–≤–æ–¥ –º–µ—Å—Ç–∞
    entering_location = State()
    # –í–≤–æ–¥ –¥–∞—Ç—ã
    entering_date = State()
    # –í–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    entering_contact = State()
    # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Å–≤–æ–∏—Ö –∑–∞–ø–∏—Å–µ–π
    viewing_my_finds = State()
    # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
    viewing_selected_find = State()
    # –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/—É–¥–∞–ª–∏—Ç—å)
    choosing_action = State()
    # –í—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    choosing_edit_field = State()
    # –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    entering_edit_value = State()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=config.API_TOKEN)
dp = Dispatcher()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message(Command("start"))
async def start(message: Message):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    # await state.clear() # –ù–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è state –≤ handler –¥–ª—è Command
    main_sections_menu = create_main_sections_menu()
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_sections_menu
    )

# --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
# --- –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª "–û–±—ä—è–≤–ª–µ–Ω–∏—è" ---
@dp.message(F.text == "üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è")
async def enter_ads_section(message: Message, state: FSMContext):
    ads_submenu = create_ads_submenu()
    await message.answer("–†–∞–∑–¥–µ–ª: –û–±—ä—è–≤–ª–µ–Ω–∏—è", reply_markup=ads_submenu)

# --- –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª "–ü–æ—Ç–µ—Ä—è—à–∫–∏" ---
@dp.message(F.text == "üîç –ü–æ—Ç–µ—Ä—è—à–∫–∏")
async def enter_finds_section(message: Message, state: FSMContext):
    finds_submenu = create_finds_submenu()
    await message.answer("–†–∞–∑–¥–µ–ª: –ü–æ—Ç–µ—Ä—è—à–∫–∏", reply_markup=finds_submenu)

# --- –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö ---
# –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–¥–º–µ–Ω—é "–û–±—ä—è–≤–ª–µ–Ω–∏—è"
@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", lambda msg: msg.reply_markup and any("–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ" in row[0].text for row in msg.reply_markup.keyboard))
async def back_from_ads(message: Message, state: FSMContext):
    main_sections_menu = create_main_sections_menu()
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_sections_menu)

# –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–¥–º–µ–Ω—é "–ü–æ—Ç–µ—Ä—è—à–∫–∏"
@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", lambda msg: msg.reply_markup and any("–°–æ–æ–±—â–∏—Ç—å" in row[0].text for row in msg.reply_markup.keyboard))
async def back_from_finds(message: Message, state: FSMContext):
    main_sections_menu = create_main_sections_menu()
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_sections_menu)

# --- –†–∞–∑–¥–µ–ª "–û–±—ä—è–≤–ª–µ–Ω–∏—è" ---
# --- –ü–æ–¥–∞—á–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ---
@dp.message(F.text == "‚ûï –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def new_ad_start(message: Message, state: FSMContext):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –£–ü–†–û–©–ï–ù–ù–£–Æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    simple_kb = create_simple_categories_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=simple_kb)
    await state.set_state(AdStates.category)

@dp.message(StateFilter(AdStates.category))
async def process_category(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
        ads_submenu = create_ads_submenu()
        await state.clear()
        await message.answer("–†–∞–∑–¥–µ–ª: –û–±—ä—è–≤–ª–µ–Ω–∏—è", reply_markup=ads_submenu)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Å–ø–∏—Å–∫—É, —Ç–∞–∫ –∫–∞–∫ –≤ –∫–Ω–æ–ø–∫–∞—Ö –Ω–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    if message.text not in categories_list:
        simple_kb = create_simple_categories_keyboard()
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ üëá.", reply_markup=simple_kb)
        return

    await state.update_data(category=message.text)
    # –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É "–û—Ç–º–µ–Ω–∞"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: ‚úÖ", reply_markup=cancel_kb)
    await state.set_state(AdStates.title)

@dp.message(StateFilter(AdStates.title))
async def process_title(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
         # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
         await new_ad_start(message, state) # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
         return

    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: üí¨", reply_markup=cancel_kb)
    await state.set_state(AdStates.description)

@dp.message(StateFilter(AdStates.description))
async def process_description(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
        data = await state.get_data()
        current_title = data.get('title', '')
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: ‚úÖ\n(–¢–µ–∫—É—â–∏–π: {current_title})", reply_markup=cancel_kb)
        await state.set_state(AdStates.title)
        return

    await state.update_data(description=message.text)
    user_photos[message.from_user.id] = []
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ (–¥–æ 3 —à—Ç, –ø–æ –æ–¥–Ω–æ–º—É). üëâ –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç.", reply_markup=cancel_kb)
    await state.set_state(AdStates.photo)

@dp.message(StateFilter(AdStates.photo), F.photo)
async def process_photo(message: Message, state: FSMContext):
    # if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": # –≠—Ç–æ—Ç if –Ω–µ –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
    #     ...
    #     return

    user_id = message.from_user.id
    if len(user_photos[user_id]) < 3:
        user_photos[user_id].append(message.photo[-1].file_id)
        await message.answer(f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({len(user_photos[user_id])}/3)")
        await asyncio.sleep(0.1) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
    else:
        await message.answer("–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ.")

@dp.message(StateFilter(AdStates.photo))
async def process_photo_done(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –∫ –æ–ø–∏—Å–∞–Ω–∏—é, –µ—Å–ª–∏ —Ñ–æ—Ç–æ —É–∂–µ –µ—Å—Ç—å)
        data = await state.get_data()
        user_id = message.from_user.id
        photo_count = len(user_photos.get(user_id, []))
        if photo_count > 0:
             await message.answer(f"–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ (–¥–æ 3 —à—Ç, –ø–æ –æ–¥–Ω–æ–º—É). üëâ –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç.\n(–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {photo_count})", reply_markup=cancel_kb)
        else:
             # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –±—ã–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–ø–∏—Å–∞–Ω–∏—é
             current_desc = data.get('description', '')
             await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: üí¨\n(–¢–µ–∫—É—â–µ–µ: {current_desc[:50]}...)", reply_markup=cancel_kb)
             await state.set_state(AdStates.description)
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç üìû(—Ç–µ–ª–µ—Ñ–æ–Ω, @username):", reply_markup=cancel_kb)
    await state.set_state(AdStates.contact)

@dp.message(StateFilter(AdStates.contact))
async def process_contact(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ/–∑–∞–≤–µ—Ä—à–µ–Ω–∏—é
        data = await state.get_data()
        user_id = message.from_user.id
        photo_count = len(user_photos.get(user_id, []))
        await message.answer(f"–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ (–¥–æ 3 —à—Ç, –ø–æ –æ–¥–Ω–æ–º—É). üëâ –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç.\n(–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {photo_count})", reply_markup=cancel_kb)
        await state.set_state(AdStates.photo)
        return

    data = await state.get_data()
    user_id = message.from_user.id
    photo_ids = user_photos.get(user_id, [])
    created_at = datetime.now().strftime("%d.%m.%Y %H:%M")

    try:
        database.add_ad(
            user_id=user_id,
            category=data['category'],
            title=data['title'],
            description=data['description'],
            photo_ids=photo_ids,
            contact=message.text,
            created_at=created_at
        )
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        # global main_menu # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º global –¥–ª—è reply_markup
        # main_menu = create_main_menu() # –ù–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç—É—Ç, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –¥—Ä—É–≥–æ–µ –º–µ–Ω—é
        ads_submenu = create_ads_submenu() # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø–æ–¥–º–µ–Ω—é –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        await message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!", reply_markup=ads_submenu)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
        ads_submenu = create_ads_submenu()
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=ads_submenu)

    await state.clear()
    if user_id in user_photos:
        del user_photos[user_id]

# --- –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ---
@dp.message(F.text == "üîç –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
async def search_by_category_start(message: Message, state: FSMContext):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –° –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–ª—è –ø–æ–∏—Å–∫–∞
    search_kb = create_search_categories_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=search_kb)
    await state.set_state(AdStates.search_category)

@dp.message(StateFilter(AdStates.search_category))
async def process_search_category(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–º–µ–Ω—é –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
        ads_submenu = create_ads_submenu()
        await state.clear()
        await message.answer("–†–∞–∑–¥–µ–ª: –û–±—ä—è–≤–ª–µ–Ω–∏—è", reply_markup=ads_submenu)
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ "(...)"
    selected_category_text = message.text.split(" (")[0]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞
    if selected_category_text not in categories_list:
        search_kb = create_search_categories_keyboard()
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=search_kb)
        return

    category = selected_category_text

    try:
        ads = database.get_ads_by_category(category)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_search_category: {e}")
        ads_submenu = create_ads_submenu()
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=ads_submenu)
        await state.clear()
        return

    if not ads:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–º–µ–Ω—é –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        ads_submenu = create_ads_submenu()
        await message.answer(f"üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'.", reply_markup=ads_submenu)
        await state.clear()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∫–∞–∑, –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–º–µ–Ω—é
    ads_submenu = create_ads_submenu()
    await message.answer(f"üìÑ –û–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':", reply_markup=ads_submenu)

    for i, ad in enumerate(ads[:5]):
        text = f"""
üìå {ad[3]}  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
üí¨ {ad[4]}      # –û–ø–∏—Å–∞–Ω–∏–µ

üìû –ö–æ–Ω—Ç–∞–∫—Ç: {ad[6]}
üìÖ –î–∞—Ç–∞: {ad[7]}
        """
        await message.answer(text)
        photo_ids = ad[5]
        if photo_ids:
            try:
                photo_list = photo_ids.split(',')
                media = [types.InputMediaPhoto(media=pid) for pid in photo_list[:10]] # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
                await bot.send_media_group(chat_id=message.chat.id, media=media)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {ad[0]}: {e}")
            await asyncio.sleep(0.5) # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ñ–æ—Ç–æ

        if i < len(ads[:5]) - 1:
            await asyncio.sleep(0.5) # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏

    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞

# --- –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ---
@dp.message(F.text == "üë§ –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def my_ads_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        user_ads = database.get_ads_by_user_id(user_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ my_ads_start: {e}")
        ads_submenu = create_ads_submenu()
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.", reply_markup=ads_submenu)
        return

    if not user_ads:
        ads_submenu = create_ads_submenu()
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.", reply_markup=ads_submenu)
        return

    await message.answer("üìÑ –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(my_ads=user_ads)
    await state.set_state(AdStates.my_ads_list)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    kb = []
    for ad in user_ads[:10]: # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        button_text = f"üÜî {ad[0]}: {ad[3][:20]}..." # ID + –∑–∞–≥–æ–ª–æ–≤–æ–∫
        kb.append([KeyboardButton(text=button_text)])
    kb.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    ads_kb = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=ads_kb)

# –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ "–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"
@dp.message(StateFilter(AdStates.my_ads_list))
async def my_ads_select(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–º–µ–Ω—é –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
        ads_submenu = create_ads_submenu()
        await state.clear()
        await message.answer("–†–∞–∑–¥–µ–ª: –û–±—ä—è–≤–ª–µ–Ω–∏—è", reply_markup=ads_submenu)
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ "üÜî 123: –ó–∞–≥–æ–ª–æ–≤–æ–∫..."
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ ":" –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏
        ad_id_str = message.text.split(":")[0].split()[-1]
        ad_id = int(ad_id_str)
        data = await state.get_data()
        user_ads = data.get('my_ads', [])
        selected_ad = next((ad for ad in user_ads if ad[0] == ad_id), None)

        if not selected_ad:
            await message.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        await state.update_data(selected_ad=selected_ad)
        await state.set_state(AdStates.my_ad_selected)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
        text = f"""
üÜî ID: {selected_ad[0]}
üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {selected_ad[2]}
üè∑Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫: {selected_ad[3]}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {selected_ad[4]}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: {selected_ad[6]}
üìÖ –î–∞—Ç–∞: {selected_ad[7]}
        """
        await message.answer(text)

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        actions_kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")],
                [KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")],
                [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=actions_kb)

    except (ValueError, IndexError, StopIteration) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ my_ads_select: {e}")
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")

# --- –î–µ–π—Å—Ç–≤–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º ---
@dp.message(StateFilter(AdStates.my_ad_selected))
async def my_ad_action(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        await my_ads_start(message, state) # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
        return

    if message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å":
        data = await state.get_data()
        selected_ad = data.get('selected_ad')
        if selected_ad:
            ad_id = selected_ad[0]
            try:
                database.delete_ad(ad_id)
                # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è (–Ω–µ –Ω—É–∂–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø–æ–¥–º–µ–Ω—é)
                # global main_menu
                # main_menu = create_main_menu()
                ads_submenu = create_ads_submenu()
                await message.answer(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} —É–¥–∞–ª–µ–Ω–æ!", reply_markup=ads_submenu)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è #{ad_id}: {e}")
                ads_submenu = create_ads_submenu()
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", reply_markup=ads_submenu)
            await state.clear()
        else:
            ads_submenu = create_ads_submenu()
            await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=ads_submenu)
        return

    if message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
        await state.set_state(AdStates.my_ad_edit_field)
        edit_kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üè∑Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫")],
                [KeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ")],
                [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç")],
                [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=edit_kb)
        return

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")

# --- –í—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
@dp.message(StateFilter(AdStates.my_ad_edit_field))
async def my_ad_edit_field(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é
        data = await state.get_data()
        selected_ad = data.get('selected_ad')
        if selected_ad:
            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –≤—ã–≤–æ–¥ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏–π
            text = f"""
üÜî ID: {selected_ad[0]}
üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {selected_ad[2]}
üè∑Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫: {selected_ad[3]}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {selected_ad[4]}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: {selected_ad[6]}
üìÖ –î–∞—Ç–∞: {selected_ad[7]}
            """
            await message.answer(text)
            actions_kb = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")],
                    [KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")],
                    [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=actions_kb)
            await state.set_state(AdStates.my_ad_selected)
        else:
            ads_submenu = create_ads_submenu()
            await message.answer("‚ùå –û—à–∏–±–∫–∞.", reply_markup=ads_submenu)
        return

    field_map = {
        "üè∑Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫": "title",
        "üìù –û–ø–∏—Å–∞–Ω–∏–µ": "description",
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç": "contact"
    }

    if message.text in field_map:
        field_name = field_map[message.text]
        await state.update_data(editing_field=field_name)
        await state.set_state(AdStates.my_ad_edit_value)

        data = await state.get_data()
        selected_ad = data.get('selected_ad')
        current_value = ""
        if selected_ad:
            if field_name == "title":
                current_value = selected_ad[3]
            elif field_name == "description":
                current_value = selected_ad[4]
            elif field_name == "contact":
                current_value = selected_ad[6]

        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '{message.text}':\n(–¢–µ–∫—É—â–µ–µ: {current_value})", reply_markup=cancel_kb)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")

# --- –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è ---
@dp.message(StateFilter(AdStates.my_ad_edit_value))
async def my_ad_edit_value(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—è
        edit_kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üè∑Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫")],
                [KeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ")],
                [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç")],
                [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=edit_kb)
        await state.set_state(AdStates.my_ad_edit_field)
        return

    new_value = message.text
    data = await state.get_data()
    selected_ad = data.get('selected_ad')
    field_name = data.get('editing_field')
    ad_id = selected_ad[0] if selected_ad else None

    if not selected_ad or not field_name or not ad_id:
        ads_submenu = create_ads_submenu()
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=ads_submenu)
        await state.clear()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        database.update_ad_field(ad_id, field_name, new_value)
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–µ –Ω—É–∂–Ω–æ)
        # global main_menu
        # main_menu = create_main_menu()
        ads_submenu = create_ads_submenu()
        await message.answer(f"‚úÖ –ü–æ–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=ads_submenu)

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ø–æ–¥–º–µ–Ω—é –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è: {e}")
        ads_submenu = create_ads_submenu()
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=ads_submenu)
        await state.clear()

# --- –†–∞–∑–¥–µ–ª "–ü–æ—Ç–µ—Ä—è—à–∫–∏" ---

# --- 1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ---
@dp.message(F.text == "‚ûï –°–æ–æ–±—â–∏—Ç—å")
async def finds_start_add(message: Message, state: FSMContext):
    find_type_kb = create_find_type_kb()
    await state.set_state(FindStates.choosing_type)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏:", reply_markup=find_type_kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
@dp.message(StateFilter(FindStates.choosing_type))
async def finds_process_type(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        finds_submenu = create_finds_submenu()
        await state.clear()
        await message.answer("–†–∞–∑–¥–µ–ª: –ü–æ—Ç–µ—Ä—è—à–∫–∏", reply_markup=finds_submenu)
        return
    if message.text not in ["üéÅ –ù–∞—à–µ–ª", "üò¢ –ü–æ—Ç–µ—Ä—è–ª"]:
        find_type_kb = create_find_type_kb()
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏.", reply_markup=find_type_kb)
        return

    find_type = "found" if message.text == "üéÅ –ù–∞—à–µ–ª" else "lost"
    await state.update_data(find_type=find_type)
    await state.set_state(FindStates.entering_item)
    await message.answer("–û–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–°—É–º–∫–∞', '–ö–ª—é—á–∏', '–¢–µ–ª–µ—Ñ–æ–Ω'):", reply_markup=cancel_kb)

# –í–≤–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞
@dp.message(StateFilter(FindStates.entering_item))
async def finds_process_item(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        find_type_kb = create_find_type_kb()
        await state.set_state(FindStates.choosing_type)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏:", reply_markup=find_type_kb)
        return
    await state.update_data(item=message.text)
    await state.set_state(FindStates.entering_description)
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (—Ü–≤–µ—Ç, –º–∞—Ä–∫–∞, –æ—Å–æ–±—ã–µ –ø—Ä–∏–º–µ—Ç—ã):", reply_markup=cancel_kb)

# –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
@dp.message(StateFilter(FindStates.entering_description))
async def finds_process_description(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        current_item = data.get('item', '')
        await message.answer(f"–û–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–°—É–º–∫–∞', '–ö–ª—é—á–∏', '–¢–µ–ª–µ—Ñ–æ–Ω'):\n(–¢–µ–∫—É—â–∏–π: {current_item})", reply_markup=cancel_kb)
        await state.set_state(FindStates.entering_item)
        return
    await state.update_data(description=message.text)
    await state.set_state(FindStates.entering_location)
    await message.answer("–ì–¥–µ —ç—Ç–æ –±—ã–ª–æ?", reply_markup=cancel_kb)

# –í–≤–æ–¥ –º–µ—Å—Ç–∞
@dp.message(StateFilter(FindStates.entering_location))
async def finds_process_location(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        current_desc = data.get('description', '')
        await message.answer(f"–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (—Ü–≤–µ—Ç, –º–∞—Ä–∫–∞, –æ—Å–æ–±—ã–µ –ø—Ä–∏–º–µ—Ç—ã):\n(–¢–µ–∫—É—â–µ–µ: {current_desc})", reply_markup=cancel_kb)
        await state.set_state(FindStates.entering_description)
        return
    await state.update_data(location=message.text)
    await state.set_state(FindStates.entering_date)
    await message.answer("–ö–æ–≥–¥–∞ —ç—Ç–æ –±—ã–ª–æ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–°–µ–≥–æ–¥–Ω—è —É—Ç—Ä–æ–º', '–í—á–µ—Ä–∞ –≤–µ—á–µ—Ä–æ–º')", reply_markup=cancel_kb)

# –í–≤–æ–¥ –¥–∞—Ç—ã
@dp.message(StateFilter(FindStates.entering_date))
async def finds_process_date(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        current_loc = data.get('location', '')
        await message.answer(f"–ì–¥–µ —ç—Ç–æ –±—ã–ª–æ?\n(–¢–µ–∫—É—â–µ–µ: {current_loc})", reply_markup=cancel_kb)
        await state.set_state(FindStates.entering_location)
        return
    await state.update_data(date=message.text)
    await state.set_state(FindStates.entering_contact)
    await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (—Ç–µ–ª–µ—Ñ–æ–Ω, @username):", reply_markup=cancel_kb)

# –í–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
@dp.message(StateFilter(FindStates.entering_contact))
async def finds_process_contact_and_save(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        current_date = data.get('date', '')
        await message.answer(f"–ö–æ–≥–¥–∞ —ç—Ç–æ –±—ã–ª–æ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–°–µ–≥–æ–¥–Ω—è —É—Ç—Ä–æ–º', '–í—á–µ—Ä–∞ –≤–µ—á–µ—Ä–æ–º')\n(–¢–µ–∫—É—â–µ–µ: {current_date})", reply_markup=cancel_kb)
        await state.set_state(FindStates.entering_date)
        return

    data = await state.get_data()
    user_id = message.from_user.id
    find_type = data['find_type']
    item = data['item']
    description = data['description']
    location = data['location']
    date = data['date']
    contact = message.text
    created_at = datetime.now().strftime("%d.%m.%Y %H:%M")

    try:
        database.add_find(
            user_id=user_id,
            find_type=find_type,
            item=item,
            description=description,
            location=location,
            date=date,
            contact=contact,
            created_at=created_at
        )
        finds_submenu = create_finds_submenu()
        await message.answer("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=finds_submenu)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ –ü–æ—Ç–µ—Ä—è—à–∫–∏: {e}")
        finds_submenu = create_finds_submenu()
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=finds_submenu)

    await state.clear()

# --- 2. –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π ---
# --- –ü—Ä–æ—Å–º–æ—Ç—Ä "–ù–∞–π–¥–µ–Ω–æ" ---
@dp.message(F.text == "üëÄ –ù–∞–π–¥–µ–Ω–æ")
async def finds_show_found(message: Message):
    try:
        found_items = database.get_finds_by_type("found")
        finds_submenu = create_finds_submenu()
        if not found_items:
            await message.answer("üì≠ –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª.", reply_markup=finds_submenu)
            return

        await message.answer("üîç –ù–∞–π–¥–µ–Ω–æ:", reply_markup=finds_submenu)
        for item in found_items[:10]: # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
             text = f"""
üìå –ü—Ä–µ–¥–º–µ—Ç: {item[3]}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {item[4]}
üìç –ì–¥–µ: {item[5]}
üìÖ –ö–æ–≥–¥–∞: {item[6]}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: {item[7]}
üïí –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {item[8]}
             """
             await message.answer(text)
             await asyncio.sleep(0.1) # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ —Ñ–ª—É–¥–∞
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {e}")
        finds_submenu = create_finds_submenu()
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞—Ö–æ–¥–æ–∫.", reply_markup=finds_submenu)

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä "–ü–æ—Ç–µ—Ä—è–Ω–æ" ---
@dp.message(F.text == "üÜò –ü–æ—Ç–µ—Ä—è–Ω–æ")
async def finds_show_lost(message: Message):
    try:
        lost_items = database.get_finds_by_type("lost")
        finds_submenu = create_finds_submenu()
        if not lost_items:
            await message.answer("üì≠ –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ—Ç–µ—Ä—è–ª.", reply_markup=finds_submenu)
            return

        await message.answer("üÜò –ü–æ—Ç–µ—Ä—è–Ω–æ:", reply_markup=finds_submenu)
        for item in lost_items[:10]: # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
             text = f"""
üìå –ü—Ä–µ–¥–º–µ—Ç: {item[3]}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {item[4]}
üìç –ì–¥–µ: {item[5]}
üìÖ –ö–æ–≥–¥–∞: {item[6]}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: {item[7]}
üïí –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {item[8]}
             """
             await message.answer(text)
             await asyncio.sleep(0.1) # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ —Ñ–ª—É–¥–∞
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {e}")
        finds_submenu = create_finds_submenu()
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ—Ç–µ—Ä—å.", reply_markup=finds_submenu)

# --- 3. –ú–æ–∏ –∑–∞–ø–∏—Å–∏ ---
# (–õ–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ "–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", –Ω–æ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã `finds`)
# ... (–ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å `my_ads_start` –∏ —Ç.–¥.)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è "üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏", —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è ---
# ... (–ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ)

# --- –ê–¥–º–∏–Ω–∫–∞ (–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∫–æ–¥–µ) ---
@dp.message(Command("admin"))
async def admin_start(message: Message, command: CommandObject):
    if message.from_user.id != config.ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return

    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    if command.args and command.args.isdigit():
        ad_id = int(command.args)
        ad = database.get_ad_by_id(ad_id)
        if ad:
            database.delete_ad(ad_id)
            await message.answer(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} —É–¥–∞–ª–µ–Ω–æ!")
        else:
            await message.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–í–≤–µ–¥–∏—Ç–µ /admin_list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")

@dp.message(Command("admin_list"))
async def admin_list(message: Message):
    if message.from_user.id != config.ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return

    try:
        ads = database.get_all_ads()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ admin_list: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        return

    if not ads:
        await message.answer("üì≠ –ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        return

    await message.answer("üìÑ –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")

    for ad in ads[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        text = f"""
üÜî ID: {ad[0]}
üìå {ad[3]}
{ad[4][:100]}...

üìÖ {ad[7]}
/delete_{ad[0]} - –£–¥–∞–ª–∏—Ç—å
        """
        await message.answer(text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
@dp.message(lambda message: message.text and message.text.startswith("/delete_"))
async def delete_ad_handler(message: Message):
    if message.from_user.id != config.ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return

    try:
        ad_id = int(message.text.split("_")[1])
        ad = database.get_ad_by_id(ad_id)
        if ad:
            database.delete_ad(ad_id)
            await message.answer(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} —É–¥–∞–ª–µ–Ω–æ!")
        else:
            await message.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ delete_ad_handler: {e}")
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
