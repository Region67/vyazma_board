–•–æ—Ä–æ—à–æ, –≤–æ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π `bot.py` —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ `TelegramRetryAfter` (—Ñ–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å). –Ø –¥–æ–±–∞–≤–∏–ª –ø–∞—É–∑—ã –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —É—Ç–æ—á–Ω–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫.

**–û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:**

1.  **–î–æ–±–∞–≤–ª–µ–Ω—ã –ø–∞—É–∑—ã:** `await asyncio.sleep(0.5)` –∏–ª–∏ `1` —Å–µ–∫—É–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–±—ä—è–≤–ª–µ–Ω–∏–π, –∑–∞–ø–∏—Å–µ–π "–ü–æ—Ç–µ—Ä—è—à–µ–∫") –∏ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≥—Ä—É–ø–ø —Ñ–æ—Ç–æ.
2.  **–£—Ç–æ—á–Ω–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫:** –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç `aiogram.exceptions` –∏ –æ—Ç–¥–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ `TelegramRetryAfter` –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Å—Ç–∞—Ö, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–ª –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
3.  **–£–ª—É—á—à–µ–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è:** –ö–Ω–æ–ø–∫–∞ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" –≤ –ø–æ–¥–º–µ–Ω—é "–û–±—ä—è–≤–ª–µ–Ω–∏—è" –∏ "–ü–æ—Ç–µ—Ä—è—à–∫–∏" —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.

**–í–ê–ñ–ù–û:** –î–ª—è —ç—Ç–æ–≥–æ –∫–æ–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —á—Ç–æ–±—ã `database.py` —Ç–∞–∫–∂–µ –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ `photo_ids` –≤ —Ç–∞–±–ª–∏—Ü–µ `finds`. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é `database.py`, –∫–æ—Ç–æ—Ä—É—é —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–ª —Ä–∞–Ω–µ–µ (—Å `import sqlite3` –∏ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ–π `finds`).

```python
# bot.py
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter, CommandObject
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime
import asyncio
import logging
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Ç–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
import aiogram.exceptions

import config
import database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
database.init_db()

# –•—Ä–∞–Ω–∏–º —Ñ–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ
user_photos_ads = {}      # –î–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
user_photos_finds = {}    # –î–ª—è –ø–æ—Ç–µ—Ä—è—à–µ–∫

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
CATEGORIES_LIST = [
    "üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
    "üíº –†–∞–±–æ—Ç–∞/–£—Å–ª—É–≥–∏", "üõí –í–µ—â–∏",
    "üê∂ –û—Ç–¥–∞–º –¥–∞—Ä–æ–º", "üéì –û–±—É—á–µ–Ω–∏–µ"
]

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
def create_main_sections_menu():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏."""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è")],
            [KeyboardButton(text="üîç –ü–æ—Ç–µ—Ä—è—à–∫–∏")],
        ],
        resize_keyboard=True
    )

def create_ads_submenu():
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –û–±—ä—è–≤–ª–µ–Ω–∏—è."""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"), KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")],
            [KeyboardButton(text="üë§ –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")], # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        ],
        resize_keyboard=True
    )

def create_finds_submenu():
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –ü–æ—Ç–µ—Ä—è—à–∫–∏."""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –°–æ–æ–±—â–∏—Ç—å"), KeyboardButton(text="üëÄ –ù–∞–π–¥–µ–Ω–æ")],
            [KeyboardButton(text="üÜò –ü–æ—Ç–µ—Ä—è–Ω–æ"), KeyboardButton(text="üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")], # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        ],
        resize_keyboard=True
    )

def create_find_type_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–ø–∏—Å–∏ –≤ –ü–æ—Ç–µ—Ä—è—à–∫–∞—Ö."""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéÅ –ù–∞—à–µ–ª"), KeyboardButton(text="üò¢ –ü–æ—Ç–µ—Ä—è–ª")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")], # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        ],
        resize_keyboard=True
    )

def create_simple_categories_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è (2 –∫–æ–ª–æ–Ω–∫–∏)."""
    kb_rows = []
    for i in range(0, len(CATEGORIES_LIST), 2):
        row = [KeyboardButton(text=cat) for cat in CATEGORIES_LIST[i:i+2]]
        kb_rows.append(row)
    kb_rows.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]) # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    return ReplyKeyboardMarkup(keyboard=kb_rows, resize_keyboard=True)

def create_search_categories_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π (2 –∫–æ–ª–æ–Ω–∫–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º)."""
    kb_rows = []
    for i in range(0, len(CATEGORIES_LIST), 2):
        row_buttons = []
        for cat in CATEGORIES_LIST[i:i+2]:
            try:
                count = len(database.get_ads_by_category(cat))
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{cat}': {e}")
                count = 0
            row_buttons.append(KeyboardButton(text=f"{cat} ({count})"))
        kb_rows.append(row_buttons)
    kb_rows.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]) # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    return ReplyKeyboardMarkup(keyboard=kb_rows, resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–û—Ç–º–µ–Ω–∞/–ù–∞–∑–∞–¥" –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
cancel_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    resize_keyboard=True
)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class AdStates(StatesGroup):
    category = State()
    title = State()
    description = State()
    photo = State()
    contact = State()
    search_category = State()
    my_ads_list = State()
    my_ad_selected = State()
    my_ad_edit_field = State()
    my_ad_edit_value = State()

class FindStates(StatesGroup):
    choosing_type = State()
    entering_item = State()
    entering_description = State()
    entering_location = State()
    entering_date = State()
    entering_contact = State()
    uploading_photos = State() # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–æ—Ç–æ
    viewing_my_finds = State()
    viewing_selected_find = State()
    choosing_action = State()
    choosing_edit_field = State()
    entering_edit_value = State()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=config.API_TOKEN)
dp = Dispatcher()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message(Command("start"))
async def start(message: Message):
    main_menu = create_main_sections_menu()
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_menu
    )

# --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
@dp.message(F.text == "üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è")
async def enter_ads_section(message: Message, state: FSMContext):
    ads_submenu = create_ads_submenu()
    await message.answer("–†–∞–∑–¥–µ–ª: –û–±—ä—è–≤–ª–µ–Ω–∏—è", reply_markup=ads_submenu)

@dp.message(F.text == "üîç –ü–æ—Ç–µ—Ä—è—à–∫–∏")
async def enter_finds_section(message: Message, state: FSMContext):
    finds_submenu = create_finds_submenu()
    await message.answer("–†–∞–∑–¥–µ–ª: –ü–æ—Ç–µ—Ä—è—à–∫–∏", reply_markup=finds_submenu)

# --- –û–±—â–∞—è –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back_to_main(message: Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.clear()
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
    user_id = message.from_user.id
    if user_id in user_photos_ads:
        del user_photos_ads[user_id]
    if user_id in user_photos_finds:
        del user_photos_finds[user_id]

    main_menu = create_main_sections_menu()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)


# --- –†–∞–∑–¥–µ–ª "–û–±—ä—è–≤–ª–µ–Ω–∏—è" ---
@dp.message(F.text == "‚ûï –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def new_ad_start(message: Message, state: FSMContext):
    simple_kb = create_simple_categories_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=simple_kb)
    await state.set_state(AdStates.category)

@dp.message(StateFilter(AdStates.category))
async def process_category(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        ads_submenu = create_ads_submenu()
        await state.clear()
        user_id = message.from_user.id
        if user_id in user_photos_ads:
             del user_photos_ads[user_id]
        await message.answer("–†–∞–∑–¥–µ–ª: –û–±—ä—è–≤–ª–µ–Ω–∏—è", reply_markup=ads_submenu)
        return

    if message.text not in CATEGORIES_LIST:
        simple_kb = create_simple_categories_keyboard()
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ üëá.", reply_markup=simple_kb)
        return

    await state.update_data(category=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: ‚úÖ", reply_markup=cancel_kb)
    await state.set_state(AdStates.title)

@dp.message(StateFilter(AdStates.title))
async def process_title(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
         await new_ad_start(message, state)
         return
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: üí¨", reply_markup=cancel_kb)
    await state.set_state(AdStates.description)

@dp.message(StateFilter(AdStates.description))
async def process_description(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        current_title = data.get('title', '')
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: ‚úÖ\n(–¢–µ–∫—É—â–∏–π: {current_title})", reply_markup=cancel_kb)
        await state.set_state(AdStates.title)
        return
    await state.update_data(description=message.text)
    user_id = message.from_user.id
    user_photos_ads[user_id] = []
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ (–¥–æ 3 —à—Ç, –ø–æ –æ–¥–Ω–æ–º—É). üëâ –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.", reply_markup=cancel_kb)
    await state.set_state(AdStates.photo)

@dp.message(StateFilter(AdStates.photo), F.photo)
async def process_photo_ad(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in user_photos_ads:
        user_photos_ads[user_id] = []
    if len(user_photos_ads[user_id]) < 3:
        user_photos_ads[user_id].append(message.photo[-1].file_id)
        await message.answer(f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({len(user_photos_ads[user_id])}/3)")
        await asyncio.sleep(0.1) # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞
    else:
        await message.answer("–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ.")

@dp.message(StateFilter(AdStates.photo))
async def process_photo_done_ad(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        user_id = message.from_user.id
        photo_count = len(user_photos_ads.get(user_id, []))
        if photo_count > 0:
             await message.answer(f"–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ (–¥–æ 3 —à—Ç, –ø–æ –æ–¥–Ω–æ–º—É). üëâ –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.\n(–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {photo_count})", reply_markup=cancel_kb)
        else:
             current_desc = data.get('description', '')
             await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: üí¨\n(–¢–µ–∫—É—â–µ–µ: {current_desc[:50]}...)", reply_markup=cancel_kb)
             await state.set_state(AdStates.description)
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç üìû(—Ç–µ–ª–µ—Ñ–æ–Ω, @username):", reply_markup=cancel_kb)
    await state.set_state(AdStates.contact)

@dp.message(StateFilter(AdStates.contact))
async def process_contact_ad(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        user_id = message.from_user.id
        photo_count = len(user_photos_ads.get(user_id, []))
        await message.answer(f"–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ (–¥–æ 3 —à—Ç, –ø–æ –æ–¥–Ω–æ–º—É). üëâ –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.\n(–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {photo_count})", reply_markup=cancel_kb)
        await state.set_state(AdStates.photo)
        return

    data = await state.get_data()
    user_id = message.from_user.id
    photo_ids = user_photos_ads.get(user_id, [])
    created_at = datetime.now().strftime("%d.%m.%Y %H:%M")

    try:
        database.add_ad(
            user_id=user_id,
            category=data['category'],
            title=data['title'],
            description=data['description'],
            photo_ids=photo_ids,
            contact=message.text,
            created_at=created_at
        )
        ads_submenu = create_ads_submenu()
        if user_id in user_photos_ads:
             del user_photos_ads[user_id]
        await message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!", reply_markup=ads_submenu)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
        ads_submenu = create_ads_submenu()
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=ads_submenu)

    await state.clear()

@dp.message(F.text == "üîç –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
async def search_by_category_start(message: Message, state: FSMContext):
    search_kb = create_search_categories_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=search_kb)
    await state.set_state(AdStates.search_category)

@dp.message(StateFilter(AdStates.search_category))
async def process_search_category(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        ads_submenu = create_ads_submenu()
        await state.clear()
        await message.answer("–†–∞–∑–¥–µ–ª: –û–±—ä—è–≤–ª–µ–Ω–∏—è", reply_markup=ads_submenu)
        return

    selected_category_text = message.text.split(" (")[0]
    if selected_category_text not in CATEGORIES_LIST:
        search_kb = create_search_categories_keyboard()
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=search_kb)
        return

    category = selected_category_text
    try:
        ads = database.get_ads_by_category(category)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_search_category: {e}")
        ads_submenu = create_ads_submenu()
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=ads_submenu)
        await state.clear()
        return

    if not ads:
        ads_submenu = create_ads_submenu()
        await message.answer(f"üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'.", reply_markup=ads_submenu)
        await state.clear()
        return

    ads_submenu = create_ads_submenu()
    # –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∫–æ–º
    await message.answer(f"üìÑ –û–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':", reply_markup=types.ReplyKeyboardRemove())

    for i, ad in enumerate(ads[:5]):
        text = f"""
üìå {ad[3]}
üí¨ {ad[4]}

üìû –ö–æ–Ω—Ç–∞–∫—Ç: {ad[6]}
üìÖ –î–∞—Ç–∞: {ad[7]}
        """
        try:
            await message.answer(text)
        except aiogram.exceptions.TelegramRetryAfter as e:
            logging.warning(f"–§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
            await message.answer(f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {e.retry_after} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(e.retry_after)
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
            await message.answer(text)
        except Exception as e:
            logging.error(f"–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")

        photo_ids = ad[5]
        if photo_ids:
            try:
                photo_list = photo_ids.split(',')
                media = [types.InputMediaPhoto(media=pid) for pid in photo_list[:10]]
                await bot.send_media_group(chat_id=message.chat.id, media=media)
                await asyncio.sleep(1) # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
            except aiogram.exceptions.TelegramRetryAfter as e:
                logging.warning(f"–§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                await message.answer(f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {e.retry_after} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(e.retry_after)
                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
                try:
                    await bot.send_media_group(chat_id=message.chat.id, media=media)
                    await asyncio.sleep(1)
                except Exception as e2:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e2}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {ad[0]}: {e}")

        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
        if i < len(ads[:5]) - 1:
            await asyncio.sleep(1)

    await message.answer("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=ads_submenu)
    await state.clear()

@dp.message(F.text == "üë§ –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def my_ads_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        user_ads = database.get_ads_by_user_id(user_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ my_ads_start (–ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –ë–î): {e}")
        ads_submenu = create_ads_submenu()
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.", reply_markup=ads_submenu)
        return

    if not user_ads:
        ads_submenu = create_ads_submenu()
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.", reply_markup=ads_submenu)
        return

    await message.answer("üìÑ –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", reply_markup=types.ReplyKeyboardRemove())
    await state.update_data(my_ads=user_ads)
    await state.set_state(AdStates.my_ads_list)

    kb = []
    for ad in user_ads[:10]:
        button_text = f"üÜî {ad[0]}: {ad[3][:20]}..."
        kb.append([KeyboardButton(text=button_text)])
    kb.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    ads_kb = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=ads_kb)

@dp.message(StateFilter(AdStates.my_ads_list))
async def my_ads_select(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        ads_submenu = create_ads_submenu()
        await state.clear()
        await message.answer("–†–∞–∑–¥–µ–ª: –û–±—ä—è–≤–ª–µ–Ω–∏—è", reply_markup=ads_submenu)
        return

    try:
        ad_id_str = message.text.split(":")[0].split()[-1]
        ad_id = int(ad_id_str)
        data = await state.get_data()
        user_ads = data.get('my_ads', [])
        selected_ad = next((ad for ad in user_ads if ad[0] == ad_id), None)

        if not selected_ad:
            await message.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return

        await state.update_data(selected_ad=selected_ad)
        await state.set_state(AdStates.my_ad_selected)

        text = f"""
üÜî ID: {selected_ad[0]}
üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {selected_ad[2]}
üè∑Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫: {selected_ad[3]}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {selected_ad[4]}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: {selected_ad[6]}
üìÖ –î–∞—Ç–∞: {selected_ad[7]}
        """
        await message.answer(text)

        actions_kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")],
                [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
            ],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=actions_kb)

    except (ValueError, IndexError, StopIteration) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ my_ads_select: {e}")
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")

@dp.message(StateFilter(AdStates.my_ad_selected))
async def my_ad_action(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await my_ads_start(message, state)
        return

    if message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å":
        data = await state.get_data()
        selected_ad = data.get('selected_ad')
        if selected_ad:
            ad_id = selected_ad[0]
            try:
                database.delete_ad(ad_id)
                ads_submenu = create_ads_submenu()
                await message.answer(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} —É–¥–∞–ª–µ–Ω–æ!", reply_markup=ads_submenu)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è #{ad_id}: {e}")
                ads_submenu = create_ads_submenu()
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", reply_markup=ads_submenu)
            await state.clear()
        else:
            ads_submenu = create_ads_submenu()
            await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=ads_submenu)
        return

    if message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
        await state.set_state(AdStates.my_ad_edit_field)
        edit_kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üè∑Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫"), KeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ")],
                [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç")],
                [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
            ],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=edit_kb)
        return

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")

@dp.message(StateFilter(AdStates.my_ad_edit_field))
async def my_ad_edit_field(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        selected_ad = data.get('selected_ad')
        if selected_ad:
            text = f"""
üÜî ID: {selected_ad[0]}
üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {selected_ad[2]}
üè∑Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫: {selected_ad[3]}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {selected_ad[4]}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: {selected_ad[6]}
üìÖ –î–∞—Ç–∞: {selected_ad[7]}
            """
            await message.answer(text)
            actions_kb = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")],
                    [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
                ],
                resize_keyboard=True
            )
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=actions_kb)
            await state.set_state(AdStates.my_ad_selected)
        else:
            ads_submenu = create_ads_submenu()
            await message.answer("‚ùå –û—à–∏–±–∫–∞.", reply_markup=ads_submenu)
        return

    field_map = {
        "üè∑Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫": "title",
        "üìù –û–ø–∏—Å–∞–Ω–∏–µ": "description",
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç": "contact"
    }

    if message.text in field_map:
        field_name = field_map[message.text]
        await state.update_data(editing_field=field_name)
        await state.set_state(AdStates.my_ad_edit_value)

        data = await state.get_data()
        selected_ad = data.get('selected_ad')
        current_value = ""
        if selected_ad:
            if field_name == "title":
                current_value = selected_ad[3]
            elif field_name == "description":
                current_value = selected_ad[4]
            elif field_name == "contact":
                current_value = selected_ad[6]

        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '{message.text}':\n(–¢–µ–∫—É—â–µ–µ: {current_value})", reply_markup=cancel_kb)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")

@dp.message(StateFilter(AdStates.my_ad_edit_value))
async def my_ad_edit_value(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        edit_kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üè∑Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫"), KeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ")],
                [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç")],
                [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
            ],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=edit_kb)
        await state.set_state(AdStates.my_ad_edit_field)
        return

    new_value = message.text
    data = await state.get_data()
    selected_ad = data.get('selected_ad')
    field_name = data.get('editing_field')
    ad_id = selected_ad[0] if selected_ad else None

    if not selected_ad or not field_name or not ad_id:
        ads_submenu = create_ads_submenu()
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=ads_submenu)
        await state.clear()
        return

    try:
        database.update_ad_field(ad_id, field_name, new_value)
        ads_submenu = create_ads_submenu()
        await message.answer(f"‚úÖ –ü–æ–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=ads_submenu)
        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è: {e}")
        ads_submenu = create_ads_submenu()
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=ads_submenu)
        await state.clear()

# --- –†–∞–∑–¥–µ–ª "–ü–æ—Ç–µ—Ä—è—à–∫–∏" ---
@dp.message(F.text == "‚ûï –°–æ–æ–±—â–∏—Ç—å")
async def finds_start_add(message: Message, state: FSMContext):
    find_type_kb = create_find_type_kb()
    await state.set_state(FindStates.choosing_type)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏:", reply_markup=find_type_kb)

@dp.message(StateFilter(FindStates.choosing_type))
async def finds_process_type(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        finds_submenu = create_finds_submenu()
        await state.clear()
        user_id = message.from_user.id
        if user_id in user_photos_finds:
             del user_photos_finds[user_id]
        await message.answer("–†–∞–∑–¥–µ–ª: –ü–æ—Ç–µ—Ä—è—à–∫–∏", reply_markup=finds_submenu)
        return
    if message.text not in ["üéÅ –ù–∞—à–µ–ª", "üò¢ –ü–æ—Ç–µ—Ä—è–ª"]:
        find_type_kb = create_find_type_kb()
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏.", reply_markup=find_type_kb)
        return

    find_type = "found" if message.text == "üéÅ –ù–∞—à–µ–ª" else "lost"
    await state.update_data(find_type=find_type)
    await state.set_state(FindStates.entering_item)
    await message.answer("–û–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–°—É–º–∫–∞', '–ö–ª—é—á–∏', '–¢–µ–ª–µ—Ñ–æ–Ω'):", reply_markup=cancel_kb)

@dp.message(StateFilter(FindStates.entering_item))
async def finds_process_item(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        find_type_kb = create_find_type_kb()
        await state.set_state(FindStates.choosing_type)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏:", reply_markup=find_type_kb)
        return
    await state.update_data(item=message.text)
    await state.set_state(FindStates.entering_description)
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (—Ü–≤–µ—Ç, –º–∞—Ä–∫–∞, –æ—Å–æ–±—ã–µ –ø—Ä–∏–º–µ—Ç—ã):", reply_markup=cancel_kb)

@dp.message(StateFilter(FindStates.entering_description))
async def finds_process_description(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        current_item = data.get('item', '')
        await message.answer(f"–û–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–°—É–º–∫–∞', '–ö–ª—é—á–∏', '–¢–µ–ª–µ—Ñ–æ–Ω'):\n(–¢–µ–∫—É—â–∏–π: {current_item})", reply_markup=cancel_kb)
        await state.set_state(FindStates.entering_item)
        return
    await state.update_data(description=message.text)
    await state.set_state(FindStates.entering_location)
    await message.answer("–ì–¥–µ —ç—Ç–æ –±—ã–ª–æ?", reply_markup=cancel_kb)

@dp.message(StateFilter(FindStates.entering_location))
async def finds_process_location(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        current_desc = data.get('description', '')
        await message.answer(f"–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (—Ü–≤–µ—Ç, –º–∞—Ä–∫–∞, –æ—Å–æ–±—ã–µ –ø—Ä–∏–º–µ—Ç—ã):\n(–¢–µ–∫—É—â–µ–µ: {current_desc})", reply_markup=cancel_kb)
        await state.set_state(FindStates.entering_description)
        return
    await state.update_data(location=message.text)
    await state.set_state(FindStates.entering_date)
    await message.answer("–ö–æ–≥–¥–∞ —ç—Ç–æ –±—ã–ª–æ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–°–µ–≥–æ–¥–Ω—è —É—Ç—Ä–æ–º', '–í—á–µ—Ä–∞ –≤–µ—á–µ—Ä–æ–º')", reply_markup=cancel_kb)

@dp.message(StateFilter(FindStates.entering_date))
async def finds_process_date(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        current_loc = data.get('location', '')
        await message.answer(f"–ì–¥–µ —ç—Ç–æ –±—ã–ª–æ?\n(–¢–µ–∫—É—â–µ–µ: {current_loc})", reply_markup=cancel_kb)
        await state.set_state(FindStates.entering_location)
        return
    await state.update_data(date=message.text)
    await state.set_state(FindStates.entering_contact)
    await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (—Ç–µ–ª–µ—Ñ–æ–Ω, @username):", reply_markup=cancel_kb)

@dp.message(StateFilter(FindStates.entering_contact))
async def finds_process_contact(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        current_date = data.get('date', '')
        await message.answer(f"–ö–æ–≥–¥–∞ —ç—Ç–æ –±—ã–ª–æ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–°–µ–≥–æ–¥–Ω—è —É—Ç—Ä–æ–º', '–í—á–µ—Ä–∞ –≤–µ—á–µ—Ä–æ–º')\n(–¢–µ–∫—É—â–µ–µ: {current_date})", reply_markup=cancel_kb)
        await state.set_state(FindStates.entering_date)
        return
    await state.update_data(contact=message.text)
    user_id = message.from_user.id
    user_photos_finds[user_id] = []
    await state.set_state(FindStates.uploading_photos)
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ (–¥–æ 3 —à—Ç, –ø–æ –æ–¥–Ω–æ–º—É). üëâ –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.", reply_markup=cancel_kb)

@dp.message(StateFilter(FindStates.uploading_photos), F.photo)
async def finds_process_photo(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in user_photos_finds:
        user_photos_finds[user_id] = []
    if len(user_photos_finds[user_id]) < 3:
        user_photos_finds[user_id].append(message.photo[-1].file_id)
        await message.answer(f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({len(user_photos_finds[user_id])}/3)")
        await asyncio.sleep(0.1) # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞
    else:
        await message.answer("–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ.")

@dp.message(StateFilter(FindStates.uploading_photos))
async def finds_process_photo_done(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        user_id = message.from_user.id
        photo_count = len(user_photos_finds.get(user_id, []))
        if photo_count > 0:
             await message.answer(f"–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ (–¥–æ 3 —à—Ç, –ø–æ –æ–¥–Ω–æ–º—É). üëâ –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.\n(–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {photo_count})", reply_markup=cancel_kb)
        else:
             current_contact = data.get('contact', '')
             await message.answer(f"–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (—Ç–µ–ª–µ—Ñ–æ–Ω, @username):\n(–¢–µ–∫—É—â–∏–π: {current_contact})", reply_markup=cancel_kb)
             await state.set_state(FindStates.entering_contact)
        return
    await finds_save_find(message, state)

async def finds_save_find(message: Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –ü–æ—Ç–µ—Ä—è—à–∫–∏."""
    data = await state.get_data()
    user_id = message.from_user.id
    find_type = data['find_type']
    item = data['item']
    description = data['description']
    location = data['location']
    date = data['date']
    contact = data['contact']
    photo_ids = user_photos_finds.get(user_id, [])
    created_at = datetime.now().strftime("%d.%m.%Y %H:%M")

    try:
        database.add_find(
            user_id=user_id,
            find_type=find_type,
            item=item,
            description=description,
            location=location,
            date=date,
            contact=contact,
            photo_ids=photo_ids,
            created_at=created_at
        )
        finds_submenu = create_finds_submenu()
        if user_id in user_photos_finds:
             del user_photos_finds[user_id]
        await message.answer("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=finds_submenu)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ –ü–æ—Ç–µ—Ä—è—à–∫–∏: {e}")
        finds_submenu = create_finds_submenu()
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=finds_submenu)

    await state.clear()

@dp.message(F.text == "üëÄ –ù–∞–π–¥–µ–Ω–æ")
async def finds_show_found(message: Message):
     try:
         found_items = database.get_finds_by_type("found")
         finds_submenu = create_finds_submenu()
         if not found_items:
             await message.answer("üì≠ –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª.", reply_markup=finds_submenu)
             return

         await message.answer("üîç –ù–∞–π–¥–µ–Ω–æ:", reply_markup=types.ReplyKeyboardRemove())

         for i, item in enumerate(found_items[:10]):
              text = f"""
üìå –ü—Ä–µ–¥–º–µ—Ç: {item[3]}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {item[4]}
üìç –ì–¥–µ: {item[5]}
üìÖ –ö–æ–≥–¥–∞: {item[6]}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: {item[7]}
üïí –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {item[9]}
              """
              try:
                  await message.answer(text)
              except aiogram.exceptions.TelegramRetryAfter as e:
                  logging.warning(f"–§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø–∏—Å–∏ (–ù–∞–π–¥–µ–Ω–æ): {e}")
                  await message.answer(f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {e.retry_after} —Å–µ–∫—É–Ω–¥...")
                  await asyncio.sleep(e.retry_after)
                  await message.answer(text)
              except Exception as e:
                  logging.error(f"–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø–∏—Å–∏ (–ù–∞–π–¥–µ–Ω–æ): {e}")
                  await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø–∏—Å–∏.")

              photo_ids = item[8]
              if photo_ids:
                  try:
                      photo_list = photo_ids.split(',')
                      media = [types.InputMediaPhoto(media=pid) for pid in photo_list[:10]]
                      await bot.send_media_group(chat_id=message.chat.id, media=media)
                      await asyncio.sleep(1) # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ —Ñ–æ—Ç–æ
                  except aiogram.exceptions.TelegramRetryAfter as e:
                      logging.warning(f"–§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ (–ù–∞–π–¥–µ–Ω–æ): {e}")
                      await message.answer(f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {e.retry_after} —Å–µ–∫—É–Ω–¥...")
                      await asyncio.sleep(e.retry_after)
                      try:
                          await bot.send_media_group(chat_id=message.chat.id, media=media)
                          await asyncio.sleep(1)
                      except Exception as e2:
                          logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ (–ù–∞–π–¥–µ–Ω–æ): {e2}")
                  except Exception as e:
                      logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ {item[0]} (–ù–∞–π–¥–µ–Ω–æ): {e}")

              # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏
              if i < len(found_items[:10]) - 1:
                  await asyncio.sleep(1)

         await message.answer("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=finds_submenu)
     except Exception as e:
         logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {e}")
         finds_submenu = create_finds_submenu()
         await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞—Ö–æ–¥–æ–∫.", reply_markup=finds_submenu)

@dp.message(F.text == "üÜò –ü–æ—Ç–µ—Ä—è–Ω–æ")
async def finds_show_lost(message: Message):
     try:
         lost_items = database.get_finds_by_type("lost")
         finds_submenu = create_finds_submenu()
         if not lost_items:
             await message.answer("üì≠ –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ—Ç–µ—Ä—è–ª.", reply_markup=finds_submenu)
             return

         await message.answer("üÜò –ü–æ—Ç–µ—Ä—è–Ω–æ:", reply_markup=types.ReplyKeyboardRemove())

         for i, item in enumerate(lost_items[:10]):
              text = f"""
üìå –ü—Ä–µ–¥–º–µ—Ç: {item[3]}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {item[4]}
üìç –ì–¥–µ: {item[5]}
üìÖ –ö–æ–≥–¥–∞: {item[6]}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: {item[7]}
üïí –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {item[9]}
              """
              try:
                  await message.answer(text)
              except aiogram.exceptions.TelegramRetryAfter as e:
                  logging.warning(f"–§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø–∏—Å–∏ (–ü–æ—Ç–µ—Ä—è–Ω–æ): {e}")
                  await message.answer(f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {e.retry_after} —Å–µ–∫—É–Ω–¥...")
                  await asyncio.sleep(e.retry_after)
                  await message.answer(text)
              except Exception as e:
                  logging.error(f"–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø–∏—Å–∏ (–ü–æ—Ç–µ—Ä—è–Ω–æ): {e}")
                  await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø–∏—Å–∏.")

              photo_ids = item[8]
              if photo_ids:
                  try:
                      photo_list = photo_ids.split(',')
                      media = [types.InputMediaPhoto(media=pid) for pid in photo_list[:10]]
                      await bot.send_media_group(chat_id=message.chat.id, media=media)
                      await asyncio.sleep(1) # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ —Ñ–æ—Ç–æ
                  except aiogram.exceptions.TelegramRetryAfter as e:
                      logging.warning(f"–§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ (–ü–æ—Ç–µ—Ä—è–Ω–æ): {e}")
                      await message.answer(f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {e.retry_after} —Å–µ–∫—É–Ω–¥...")
                      await asyncio.sleep(e.retry_after)
                      try:
                          await bot.send_media_group(chat_id=message.chat.id, media=media)
                          await asyncio.sleep(1)
                      except Exception as e2:
                          logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ (–ü–æ—Ç–µ—Ä—è–Ω–æ): {e2}")
                  except Exception as e:
                      logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ {item[0]} (–ü–æ—Ç–µ—Ä—è–Ω–æ): {e}")

              # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏
              if i < len(lost_items[:10]) - 1:
                  await asyncio.sleep(1)

         await message.answer("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=finds_submenu)
     except Exception as e:
         logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {e}")
         finds_submenu = create_finds_submenu()
         await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ—Ç–µ—Ä—å.", reply_markup=finds_submenu)

# --- –ê–¥–º–∏–Ω–∫–∞ (–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∫–æ–¥–µ) ---
@dp.message(Command("admin"))
async def admin_start(message: Message, command: CommandObject):
    if message.from_user.id != config.ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return

    if command.args and command.args.isdigit():
        ad_id = int(command.args)
        ad = database.get_ad_by_id(ad_id)
        if ad:
            database.delete_ad(ad_id)
            await message.answer(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} —É–¥–∞–ª–µ–Ω–æ!")
        else:
            await message.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–í–≤–µ–¥–∏—Ç–µ /admin_list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")

@dp.message(Command("admin_list"))
async def admin_list(message: Message):
    if message.from_user.id != config.ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return

    try:
        ads = database.get_all_ads()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ admin_list: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        return

    if not ads:
        await message.answer("üì≠ –ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        return

    await message.answer("üìÑ –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")

    for ad in ads[:10]:
        text = f"""
üÜî ID: {ad[0]}
üìå {ad[3]}
{ad[4][:100]}...

üìÖ {ad[7]}
/delete_{ad[0]} - –£–¥–∞–ª–∏—Ç—å
        """
        await message.answer(text)

@dp.message(lambda message: message.text and message.text.startswith("/delete_"))
async def delete_ad_handler(message: Message):
    if message.from_user.id != config.ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return

    try:
        ad_id = int(message.text.split("_")[1])
        ad = database.get_ad_by_id(ad_id)
        if ad:
            database.delete_ad(ad_id)
            await message.answer(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} —É–¥–∞–ª–µ–Ω–æ!")
        else:
            await message.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ delete_ad_handler: {e}")
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
```
