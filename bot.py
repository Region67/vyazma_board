# bot.py
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime
import asyncio
import logging

import config
import database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
database.init_db()

# –•—Ä–∞–Ω–∏–º —Ñ–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ
user_photos = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")],
        [KeyboardButton(text="üîç –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")],
        [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")]
    ],
    resize_keyboard=True
)

categories_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å")],
        [KeyboardButton(text="üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç")],
        [KeyboardButton(text="üíº –†–∞–±–æ—Ç–∞/–£—Å–ª—É–≥–∏")],
        [KeyboardButton(text="üõí –í–µ—â–∏")],
        [KeyboardButton(text="üê∂ –û—Ç–¥–∞–º –¥–∞—Ä–æ–º")],
        [KeyboardButton(text="üéì –û–±—É—á–µ–Ω–∏–µ")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
search_categories_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å")],
        [KeyboardButton(text="üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç")],
        [KeyboardButton(text="üíº –†–∞–±–æ—Ç–∞/–£—Å–ª—É–≥–∏")],
        [KeyboardButton(text="üõí –í–µ—â–∏")],
        [KeyboardButton(text="üê∂ –û—Ç–¥–∞–º –¥–∞—Ä–æ–º")],
        [KeyboardButton(text="üéì –û–±—É—á–µ–Ω–∏–µ")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class AdStates(StatesGroup):
    category = State()
    title = State()
    description = State()
    photo = State()
    contact = State()
    search_category = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config.API_TOKEN)
dp = Dispatcher()

# /start
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "üì¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ [–ì–æ—Ä–æ–¥] –û–±—ä—è–≤–ª–µ–Ω–∏—è!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )

# –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
@dp.message(F.text == "‚ûï –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def new_ad_start(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_kb)
    await state.set_state(AdStates.category)

# –ö–∞—Ç–µ–≥–æ—Ä–∏—è
@dp.message(StateFilter(AdStates.category))
async def process_category(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)
        return
    await state.update_data(category=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
    await state.set_state(AdStates.title)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
@dp.message(StateFilter(AdStates.title))
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
    await state.set_state(AdStates.description)

# –û–ø–∏—Å–∞–Ω–∏–µ
@dp.message(StateFilter(AdStates.description))
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    user_photos[message.from_user.id] = []
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ (–¥–æ 3 —à—Ç, –ø–æ –æ–¥–Ω–æ–º—É). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç.")
    await state.set_state(AdStates.photo)

# –§–æ—Ç–æ
@dp.message(StateFilter(AdStates.photo), F.photo)
async def process_photo(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if len(user_photos[user_id]) < 3:
        user_photos[user_id].append(message.photo[-1].file_id)
        await message.answer(f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({len(user_photos[user_id])}/3)")
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ñ–ª—É–¥–∞
        await asyncio.sleep(0.1)
    else:
        await message.answer("–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ.")

# –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–Ω—Ç–∞–∫—Ç—É
@dp.message(StateFilter(AdStates.photo))
async def process_photo_done(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω, @username –∏–ª–∏ —Å–ª–æ–≤–æ '—á–µ—Ä–µ–∑ –±–æ—Ç–∞'):")
    await state.set_state(AdStates.contact)

# –ö–æ–Ω—Ç–∞–∫—Ç
@dp.message(StateFilter(AdStates.contact))
async def process_contact(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id
    photo_ids = user_photos.get(user_id, [])
    created_at = datetime.now().strftime("%d.%m.%Y %H:%M")

    database.add_ad(
        user_id=user_id,
        category=data['category'],
        title=data['title'],
        description=data['description'],
        photo_ids=photo_ids,
        contact=message.text,
        created_at=created_at
    )

    await message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!", reply_markup=main_menu)
    await state.clear()
    if user_id in user_photos:
        del user_photos[user_id]

# –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@dp.message(F.text == "üîç –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def show_ads(message: Message):
    try:
        ads = database.get_all_ads()
        if not ads:
            await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.", reply_markup=main_menu)
            return
        
        await message.answer("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", reply_markup=main_menu)
        
        for i, ad in enumerate(ads[:5]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
            text = f"""
üìå {ad[3]}
{ad[4]}

üìû –ö–æ–Ω—Ç–∞–∫—Ç: {ad[6]}
üìÖ –î–∞—Ç–∞: {ad[7]}
            """
            await message.answer(text)
            photo_ids = ad[5]
            if photo_ids:
                photo_list = photo_ids.split(',')
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –¥–æ 10 (–ø—Ä–µ–¥–µ–ª Telegram –¥–ª—è –≥—Ä—É–ø–ø—ã)
                media = [types.InputMediaPhoto(media=pid) for pid in photo_list[:10]]
                try:
                    await bot.send_media_group(chat_id=message.chat.id, media=media)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ç–æ
                await asyncio.sleep(0.5)
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
            if i < len(ads[:5]) - 1:  # –ù–µ –¥–µ–ª–∞—Ç—å –ø–∞—É–∑—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
                await asyncio.sleep(0.5)
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_ads: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu)

# –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º - –∫–Ω–æ–ø–∫–∞
@dp.message(F.text == "üîç –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
async def search_by_category_start(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=search_categories_kb)
    await state.set_state(AdStates.search_category)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
@dp.message(StateFilter(AdStates.search_category))
async def process_search_category(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)
        return
    
    category = message.text
    await state.update_data(search_category=category)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        ads = database.get_ads_by_category(category)
        
        if not ads:
            await message.answer(f"–ü–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'.", reply_markup=main_menu)
            await state.clear()
            return
        
        await message.answer(f"–û–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':", reply_markup=main_menu)
        
        for i, ad in enumerate(ads[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            text = f"""
üìå {ad[3]}
{ad[4]}

üìû –ö–æ–Ω—Ç–∞–∫—Ç: {ad[6]}
üìÖ –î–∞—Ç–∞: {ad[7]}
            """
            await message.answer(text)
            photo_ids = ad[5]
            if photo_ids:
                photo_list = photo_ids.split(',')
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –¥–æ 10
                media = [types.InputMediaPhoto(media=pid) for pid in photo_list[:10]]
                try:
                    await bot.send_media_group(chat_id=message.chat.id, media=media)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ç–æ
                await asyncio.sleep(0.5)
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
            if i < len(ads[:5]) - 1:  # –ù–µ –¥–µ–ª–∞—Ç—å –ø–∞—É–∑—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
                await asyncio.sleep(0.5)
        
        await state.clear()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_search_category: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu)
        await state.clear()

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
