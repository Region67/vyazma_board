# bot.py
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime
import asyncio
import logging

import config from aiogram.filters import CommandObject
import database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
database.init_db()

# –•—Ä–∞–Ω–∏–º —Ñ–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ
user_photos = {}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–±–µ–∑ "–í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")],
        [KeyboardButton(text="üîç –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")]
    ],
    resize_keyboard=True
)

# –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
categories_list = [
    "üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
    "üíº –†–∞–±–æ—Ç–∞/–£—Å–ª—É–≥–∏", "üõí –í–µ—â–∏",
    "üê∂ –û—Ç–¥–∞–º –¥–∞—Ä–æ–º", "üéì –û–±—É—á–µ–Ω–∏–µ"
]

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ 2 —Å—Ç–æ–ª–±—Ü–∞
def create_categories_keyboard():
    categories_kb_rows = []
    for i in range(0, len(categories_list), 2):
        row = [KeyboardButton(text=cat) for cat in categories_list[i:i+2]]
        categories_kb_rows.append(row)
    categories_kb_rows.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=categories_kb_rows, resize_keyboard=True)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
categories_kb = create_categories_keyboard()
search_categories_kb = create_categories_keyboard() # –¢–∞ –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class AdStates(StatesGroup):
    category = State()
    title = State()
    description = State()
    photo = State()
    contact = State()
    search_category = State()
    admin_menu = State()
    admin_delete = State()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=config.API_TOKEN)
dp = Dispatcher()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "üì¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –û–±—ä—è–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –í—è–∑—å–º–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )
# –ê–¥–º–∏–Ω–∫–∞
@dp.message(Command("admin"))
async def admin_start(message: Message, command: CommandObject):
    if message.from_user.id != config.ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    if command.args and command.args.isdigit():
        ad_id = int(command.args)
        ad = database.get_ad_by_id(ad_id)
        if ad:
            database.delete_ad(ad_id)
            await message.answer(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} —É–¥–∞–ª–µ–Ω–æ!")
        else:
            await message.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–í–≤–µ–¥–∏—Ç–µ /admin_list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")    

@dp.message(Command("admin_list"))
async def admin_list(message: Message):
    if message.from_user.id != config.ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return

    ads = database.get_all_ads()
    if not ads:
        await message.answer("üì≠ –ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        return

    await message.answer("üìÑ –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")

    for ad in ads[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        text = f"""
üÜî ID: {ad[0]}
üìå {ad[3]}
{ad[4][:100]}...

üìÖ {ad[7]}
/delete_{ad[0]} - –£–¥–∞–ª–∏—Ç—å
        """
        await message.answer(text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
@dp.message(lambda message: message.text and message.text.startswith("/delete_"))
async def delete_ad_handler(message: Message):
    if message.from_user.id != config.ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return

    try:
        ad_id = int(message.text.split("_")[1])
        ad = database.get_ad_by_id(ad_id)
        if ad:
            database.delete_ad(ad_id)
            await message.answer(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} —É–¥–∞–ª–µ–Ω–æ!")
        else:
            await message.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")

@dp.message(F.text == "‚ûï –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def new_ad_start(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_kb)
    await state.set_state(AdStates.category)

@dp.message(StateFilter(AdStates.category))
async def process_category(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)
        return
    if message.text not in categories_list:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ üëá.", reply_markup=categories_kb)
        return

    await state.update_data(category=message.text)
    # –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: ‚úÖ", reply_markup=main_menu)
    await state.set_state(AdStates.title)

@dp.message(StateFilter(AdStates.title))
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: üí¨")
    await state.set_state(AdStates.description)

@dp.message(StateFilter(AdStates.description))
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    user_photos[message.from_user.id] = []
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ (–¥–æ 3 —à—Ç, –ø–æ –æ–¥–Ω–æ–º—É). üëâ –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç.")
    await state.set_state(AdStates.photo)

@dp.message(StateFilter(AdStates.photo), F.photo)
async def process_photo(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if len(user_photos[user_id]) < 3:
        user_photos[user_id].append(message.photo[-1].file_id)
        await message.answer(f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({len(user_photos[user_id])}/3)")
        await asyncio.sleep(0.1)
    else:
        await message.answer("–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ.")

@dp.message(StateFilter(AdStates.photo))
async def process_photo_done(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç üìû(—Ç–µ–ª–µ—Ñ–æ–Ω, @username):")
    await state.set_state(AdStates.contact)

@dp.message(StateFilter(AdStates.contact))
async def process_contact(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id
    photo_ids = user_photos.get(user_id, [])
    created_at = datetime.now().strftime("%d.%m.%Y %H:%M")

    database.add_ad(
        user_id=user_id,
        category=data['category'],
        title=data['title'],
        description=data['description'],
        photo_ids=photo_ids,
        contact=message.text,
        created_at=created_at
    )

    await message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!", reply_markup=main_menu)
    await state.clear()
    if user_id in user_photos:
        del user_photos[user_id]

# --- –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ---
@dp.message(F.text == "üîç –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def search_by_category_start(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=search_categories_kb)
    await state.set_state(AdStates.search_category)

@dp.message(StateFilter(AdStates.search_category))
async def process_search_category(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞
    if message.text not in categories_list:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=search_categories_kb)
        # –ù–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
        return

    category = message.text
    # –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ state –¥–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –Ω–æ –º–æ–∂–Ω–æ
    # await state.update_data(search_category=category)

    try:
        ads = database.get_ads_by_category(category)

        if not ads:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º main_menu –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await message.answer(f"–ü–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'.", reply_markup=main_menu)
            await state.clear()
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∫–∞–∑, –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º main_menu
        await message.answer(f"–û–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':", reply_markup=main_menu)

        for i, ad in enumerate(ads[:5]):
            text = f"""
üìå {ad[3]}  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
üí¨ {ad[4]}      # –û–ø–∏—Å–∞–Ω–∏–µ

üìû –ö–æ–Ω—Ç–∞–∫—Ç: {ad[6]}
üìÖ –î–∞—Ç–∞: {ad[7]}
            """
            await message.answer(text)
            photo_ids = ad[5]
            if photo_ids:
                try:
                    photo_list = photo_ids.split(',')
                    media = [types.InputMediaPhoto(media=pid) for pid in photo_list[:10]] # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
                    await bot.send_media_group(chat_id=message.chat.id, media=media)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {ad[0]}: {e}")
                await asyncio.sleep(0.5) # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ñ–æ—Ç–æ

            if i < len(ads[:5]) - 1:
                await asyncio.sleep(0.5) # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏

        await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_search_category: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu)
        await state.clear()


# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
